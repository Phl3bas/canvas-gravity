{"version":3,"sources":["src/classes/data.ts","src/classes/circles.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.9b9bf1b3.js","sourceRoot":"..","sourcesContent":["export const Colors = ['#2185C5', '#7ECEFD', '#FFF6E5', '#FF7F66'];\n","export default class Circle {\n  constructor(\n    private windowWidth: number,\n    private windowHeight: number,\n    public x: number,\n    public y: number,\n    public radius: number,\n    public color: string,\n    public dy: number,\n    public dx: number,\n    public gravity: number\n  ) {\n    this.windowWidth = windowWidth;\n    this.windowHeight = windowHeight;\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.color = color;\n    this.dy = dy;\n    this.dx = dx;\n    this.gravity = gravity;\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  update(): void {\n    this.y += this.dy;\n    this.x += this.dx;\n\n    if (this.y + this.radius + this.dy > this.windowHeight) {\n      this.dy = -this.dy * 0.7;\n      this.radius = this.radius / 1.5;\n    } else {\n      this.dy += this.gravity;\n    }\n\n    if (\n      this.x + this.radius + this.dx > this.windowWidth ||\n      this.x - this.radius + this.dx < 0\n    ) {\n      this.dx = -this.dx;\n    }\n  }\n}\n","import { Colors } from './classes/data';\nimport Circle from './classes/circles';\n\nconst canvas: HTMLCanvasElement = document.querySelector('#scene');\nconst ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nlet mouse = {\n  x: innerWidth / 2,\n  y: innerHeight / 2,\n};\n\nconst gravity = 1;\n\naddEventListener('mousemove', e => {\n  mouse.x = e.clientX;\n  mouse.y = e.clientY;\n});\n\naddEventListener('resize', () => {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  init();\n});\n\nlet circles: Circle[];\nlet radius: number = 30;\n\nfunction init(): void {\n  circles = [];\n\n  for (let i = 0; i < 5000; i++) {\n    circles = [\n      ...circles,\n      new Circle(\n        canvas.width,\n        canvas.height,\n        Math.random() * canvas.width,\n        Math.random() * canvas.height - canvas.height,\n        Math.floor(Math.random() * 0 + 10),\n        Colors[Math.random() * 4],\n        Math.random() * 3,\n        Math.random() * 2 - 1,\n        gravity\n      ),\n    ];\n  }\n}\n\nfunction animationLoop(): void {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  circles.forEach(circle => {\n    circle.draw(ctx);\n    circle.update();\n  });\n  requestAnimationFrame(animationLoop);\n}\n\ninit();\nanimationLoop();\nsetInterval(init, 12000);\n"]}